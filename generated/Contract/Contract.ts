// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewGovernanceAddress extends ethereum.Event {
  get params(): NewGovernanceAddress__Params {
    return new NewGovernanceAddress__Params(this);
  }
}

export class NewGovernanceAddress__Params {
  _event: NewGovernanceAddress;

  constructor(event: NewGovernanceAddress) {
    this._event = event;
  }

  get _newGovernanceAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewReport extends ethereum.Event {
  get params(): NewReport__Params {
    return new NewReport__Params(this);
  }
}

export class NewReport__Params {
  _event: NewReport;

  constructor(event: NewReport) {
    this._event = event;
  }

  get _queryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _time(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _value(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _nonce(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _queryData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get _reporter(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class NewReportingLock extends ethereum.Event {
  get params(): NewReportingLock__Params {
    return new NewReportingLock__Params(this);
  }
}

export class NewReportingLock__Params {
  _event: NewReportingLock;

  constructor(event: NewReportingLock) {
    this._event = event;
  }

  get _newReportingLock(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewStakeAmount extends ethereum.Event {
  get params(): NewStakeAmount__Params {
    return new NewStakeAmount__Params(this);
  }
}

export class NewStakeAmount__Params {
  _event: NewStakeAmount;

  constructor(event: NewStakeAmount) {
    this._event = event;
  }

  get _newStakeAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewStaker extends ethereum.Event {
  get params(): NewStaker__Params {
    return new NewStaker__Params(this);
  }
}

export class NewStaker__Params {
  _event: NewStaker;

  constructor(event: NewStaker) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ReporterSlashed extends ethereum.Event {
  get params(): ReporterSlashed__Params {
    return new ReporterSlashed__Params(this);
  }
}

export class ReporterSlashed__Params {
  _event: ReporterSlashed;

  constructor(event: ReporterSlashed) {
    this._event = event;
  }

  get _reporter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _slashAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StakeWithdrawRequested extends ethereum.Event {
  get params(): StakeWithdrawRequested__Params {
    return new StakeWithdrawRequested__Params(this);
  }
}

export class StakeWithdrawRequested__Params {
  _event: StakeWithdrawRequested;

  constructor(event: StakeWithdrawRequested) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeWithdrawn extends ethereum.Event {
  get params(): StakeWithdrawn__Params {
    return new StakeWithdrawn__Params(this);
  }
}

export class StakeWithdrawn__Params {
  _event: StakeWithdrawn;

  constructor(event: StakeWithdrawn) {
    this._event = event;
  }

  get _staker(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ValueRemoved extends ethereum.Event {
  get params(): ValueRemoved__Params {
    return new ValueRemoved__Params(this);
  }
}

export class ValueRemoved__Params {
  _event: ValueRemoved;

  constructor(event: ValueRemoved) {
    this._event = event;
  }

  get _queryId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Contract__getReportDetailsResult {
  value0: Address;
  value1: boolean;

  constructor(value0: Address, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class Contract__getStakerInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getBlockNumberByTimestamp(_queryId: Bytes, _timestamp: BigInt): BigInt {
    let result = super.call(
      "getBlockNumberByTimestamp",
      "getBlockNumberByTimestamp(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBlockNumberByTimestamp(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockNumberByTimestamp",
      "getBlockNumberByTimestamp(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentValue(_queryId: Bytes): Bytes {
    let result = super.call(
      "getCurrentValue",
      "getCurrentValue(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return result[0].toBytes();
  }

  try_getCurrentValue(_queryId: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getCurrentValue",
      "getCurrentValue(bytes32):(bytes)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getGovernanceAddress(): Address {
    let result = super.call(
      "getGovernanceAddress",
      "getGovernanceAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getGovernanceAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getGovernanceAddress",
      "getGovernanceAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNewValueCountbyQueryId(_queryId: Bytes): BigInt {
    let result = super.call(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );

    return result[0].toBigInt();
  }

  try_getNewValueCountbyQueryId(_queryId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNewValueCountbyQueryId",
      "getNewValueCountbyQueryId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_queryId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReportDetails(
    _queryId: Bytes,
    _timestamp: BigInt
  ): Contract__getReportDetailsResult {
    let result = super.call(
      "getReportDetails",
      "getReportDetails(bytes32,uint256):(address,bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return new Contract__getReportDetailsResult(
      result[0].toAddress(),
      result[1].toBoolean()
    );
  }

  try_getReportDetails(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Contract__getReportDetailsResult> {
    let result = super.tryCall(
      "getReportDetails",
      "getReportDetails(bytes32,uint256):(address,bool)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getReportDetailsResult(
        value[0].toAddress(),
        value[1].toBoolean()
      )
    );
  }

  getReporterByTimestamp(_queryId: Bytes, _timestamp: BigInt): Address {
    let result = super.call(
      "getReporterByTimestamp",
      "getReporterByTimestamp(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toAddress();
  }

  try_getReporterByTimestamp(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getReporterByTimestamp",
      "getReporterByTimestamp(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getReporterLastTimestamp(_reporter: Address): BigInt {
    let result = super.call(
      "getReporterLastTimestamp",
      "getReporterLastTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(_reporter)]
    );

    return result[0].toBigInt();
  }

  try_getReporterLastTimestamp(
    _reporter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReporterLastTimestamp",
      "getReporterLastTimestamp(address):(uint256)",
      [ethereum.Value.fromAddress(_reporter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReportingLock(): BigInt {
    let result = super.call(
      "getReportingLock",
      "getReportingLock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getReportingLock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReportingLock",
      "getReportingLock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReportsSubmittedByAddress(_reporter: Address): BigInt {
    let result = super.call(
      "getReportsSubmittedByAddress",
      "getReportsSubmittedByAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_reporter)]
    );

    return result[0].toBigInt();
  }

  try_getReportsSubmittedByAddress(
    _reporter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReportsSubmittedByAddress",
      "getReportsSubmittedByAddress(address):(uint256)",
      [ethereum.Value.fromAddress(_reporter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getReportsSubmittedByAddressAndQueryId(
    _reporter: Address,
    _queryId: Bytes
  ): BigInt {
    let result = super.call(
      "getReportsSubmittedByAddressAndQueryId",
      "getReportsSubmittedByAddressAndQueryId(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_reporter),
        ethereum.Value.fromFixedBytes(_queryId)
      ]
    );

    return result[0].toBigInt();
  }

  try_getReportsSubmittedByAddressAndQueryId(
    _reporter: Address,
    _queryId: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getReportsSubmittedByAddressAndQueryId",
      "getReportsSubmittedByAddressAndQueryId(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(_reporter),
        ethereum.Value.fromFixedBytes(_queryId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakeAmount(): BigInt {
    let result = super.call("getStakeAmount", "getStakeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakeAmount",
      "getStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakerInfo(_staker: Address): Contract__getStakerInfoResult {
    let result = super.call(
      "getStakerInfo",
      "getStakerInfo(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_staker)]
    );

    return new Contract__getStakerInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getStakerInfo(
    _staker: Address
  ): ethereum.CallResult<Contract__getStakerInfoResult> {
    let result = super.tryCall(
      "getStakerInfo",
      "getStakerInfo(address):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(_staker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getStakerInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getTimeOfLastNewValue(): BigInt {
    let result = super.call(
      "getTimeOfLastNewValue",
      "getTimeOfLastNewValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTimeOfLastNewValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeOfLastNewValue",
      "getTimeOfLastNewValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimestampIndexByTimestamp(_queryId: Bytes, _timestamp: BigInt): BigInt {
    let result = super.call(
      "getTimestampIndexByTimestamp",
      "getTimestampIndexByTimestamp(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTimestampIndexByTimestamp(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestampIndexByTimestamp",
      "getTimestampIndexByTimestamp(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTimestampbyQueryIdandIndex(_queryId: Bytes, _index: BigInt): BigInt {
    let result = super.call(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTimestampbyQueryIdandIndex(
    _queryId: Bytes,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimestampbyQueryIdandIndex",
      "getTimestampbyQueryIdandIndex(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAddress(): Address {
    let result = super.call(
      "getTokenAddress",
      "getTokenAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenAddress",
      "getTokenAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTotalStakeAmount(): BigInt {
    let result = super.call(
      "getTotalStakeAmount",
      "getTotalStakeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalStakeAmount",
      "getTotalStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reportingLock(): BigInt {
    let result = super.call("reportingLock", "reportingLock():(uint256)", []);

    return result[0].toBigInt();
  }

  try_reportingLock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reportingLock",
      "reportingLock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retrieveData(_queryId: Bytes, _timestamp: BigInt): Bytes {
    let result = super.call(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBytes();
  }

  try_retrieveData(
    _queryId: Bytes,
    _timestamp: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "retrieveData",
      "retrieveData(bytes32,uint256):(bytes)",
      [
        ethereum.Value.fromFixedBytes(_queryId),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  slashReporter(_reporter: Address, _recipient: Address): BigInt {
    let result = super.call(
      "slashReporter",
      "slashReporter(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_reporter),
        ethereum.Value.fromAddress(_recipient)
      ]
    );

    return result[0].toBigInt();
  }

  try_slashReporter(
    _reporter: Address,
    _recipient: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "slashReporter",
      "slashReporter(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_reporter),
        ethereum.Value.fromAddress(_recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeAmount(): BigInt {
    let result = super.call("stakeAmount", "stakeAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("stakeAmount", "stakeAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeOfLastNewValue(): BigInt {
    let result = super.call(
      "timeOfLastNewValue",
      "timeOfLastNewValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_timeOfLastNewValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timeOfLastNewValue",
      "timeOfLastNewValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalStakeAmount(): BigInt {
    let result = super.call(
      "totalStakeAmount",
      "totalStakeAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStakeAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStakeAmount",
      "totalStakeAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _governance(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _stakeAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _reportingLock(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeGovernanceAddressCall extends ethereum.Call {
  get inputs(): ChangeGovernanceAddressCall__Inputs {
    return new ChangeGovernanceAddressCall__Inputs(this);
  }

  get outputs(): ChangeGovernanceAddressCall__Outputs {
    return new ChangeGovernanceAddressCall__Outputs(this);
  }
}

export class ChangeGovernanceAddressCall__Inputs {
  _call: ChangeGovernanceAddressCall;

  constructor(call: ChangeGovernanceAddressCall) {
    this._call = call;
  }

  get _newGovernanceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeGovernanceAddressCall__Outputs {
  _call: ChangeGovernanceAddressCall;

  constructor(call: ChangeGovernanceAddressCall) {
    this._call = call;
  }
}

export class ChangeReportingLockCall extends ethereum.Call {
  get inputs(): ChangeReportingLockCall__Inputs {
    return new ChangeReportingLockCall__Inputs(this);
  }

  get outputs(): ChangeReportingLockCall__Outputs {
    return new ChangeReportingLockCall__Outputs(this);
  }
}

export class ChangeReportingLockCall__Inputs {
  _call: ChangeReportingLockCall;

  constructor(call: ChangeReportingLockCall) {
    this._call = call;
  }

  get _newReportingLock(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeReportingLockCall__Outputs {
  _call: ChangeReportingLockCall;

  constructor(call: ChangeReportingLockCall) {
    this._call = call;
  }
}

export class ChangeStakeAmountCall extends ethereum.Call {
  get inputs(): ChangeStakeAmountCall__Inputs {
    return new ChangeStakeAmountCall__Inputs(this);
  }

  get outputs(): ChangeStakeAmountCall__Outputs {
    return new ChangeStakeAmountCall__Outputs(this);
  }
}

export class ChangeStakeAmountCall__Inputs {
  _call: ChangeStakeAmountCall;

  constructor(call: ChangeStakeAmountCall) {
    this._call = call;
  }

  get _newStakeAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeStakeAmountCall__Outputs {
  _call: ChangeStakeAmountCall;

  constructor(call: ChangeStakeAmountCall) {
    this._call = call;
  }
}

export class DepositStakeCall extends ethereum.Call {
  get inputs(): DepositStakeCall__Inputs {
    return new DepositStakeCall__Inputs(this);
  }

  get outputs(): DepositStakeCall__Outputs {
    return new DepositStakeCall__Outputs(this);
  }
}

export class DepositStakeCall__Inputs {
  _call: DepositStakeCall;

  constructor(call: DepositStakeCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositStakeCall__Outputs {
  _call: DepositStakeCall;

  constructor(call: DepositStakeCall) {
    this._call = call;
  }
}

export class RemoveValueCall extends ethereum.Call {
  get inputs(): RemoveValueCall__Inputs {
    return new RemoveValueCall__Inputs(this);
  }

  get outputs(): RemoveValueCall__Outputs {
    return new RemoveValueCall__Outputs(this);
  }
}

export class RemoveValueCall__Inputs {
  _call: RemoveValueCall;

  constructor(call: RemoveValueCall) {
    this._call = call;
  }

  get _queryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _timestamp(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveValueCall__Outputs {
  _call: RemoveValueCall;

  constructor(call: RemoveValueCall) {
    this._call = call;
  }
}

export class RequestStakingWithdrawCall extends ethereum.Call {
  get inputs(): RequestStakingWithdrawCall__Inputs {
    return new RequestStakingWithdrawCall__Inputs(this);
  }

  get outputs(): RequestStakingWithdrawCall__Outputs {
    return new RequestStakingWithdrawCall__Outputs(this);
  }
}

export class RequestStakingWithdrawCall__Inputs {
  _call: RequestStakingWithdrawCall;

  constructor(call: RequestStakingWithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RequestStakingWithdrawCall__Outputs {
  _call: RequestStakingWithdrawCall;

  constructor(call: RequestStakingWithdrawCall) {
    this._call = call;
  }
}

export class SlashReporterCall extends ethereum.Call {
  get inputs(): SlashReporterCall__Inputs {
    return new SlashReporterCall__Inputs(this);
  }

  get outputs(): SlashReporterCall__Outputs {
    return new SlashReporterCall__Outputs(this);
  }
}

export class SlashReporterCall__Inputs {
  _call: SlashReporterCall;

  constructor(call: SlashReporterCall) {
    this._call = call;
  }

  get _reporter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SlashReporterCall__Outputs {
  _call: SlashReporterCall;

  constructor(call: SlashReporterCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SubmitValueCall extends ethereum.Call {
  get inputs(): SubmitValueCall__Inputs {
    return new SubmitValueCall__Inputs(this);
  }

  get outputs(): SubmitValueCall__Outputs {
    return new SubmitValueCall__Outputs(this);
  }
}

export class SubmitValueCall__Inputs {
  _call: SubmitValueCall;

  constructor(call: SubmitValueCall) {
    this._call = call;
  }

  get _queryId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _value(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _nonce(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _queryData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SubmitValueCall__Outputs {
  _call: SubmitValueCall;

  constructor(call: SubmitValueCall) {
    this._call = call;
  }
}

export class WithdrawStakeCall extends ethereum.Call {
  get inputs(): WithdrawStakeCall__Inputs {
    return new WithdrawStakeCall__Inputs(this);
  }

  get outputs(): WithdrawStakeCall__Outputs {
    return new WithdrawStakeCall__Outputs(this);
  }
}

export class WithdrawStakeCall__Inputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }
}

export class WithdrawStakeCall__Outputs {
  _call: WithdrawStakeCall;

  constructor(call: WithdrawStakeCall) {
    this._call = call;
  }
}
